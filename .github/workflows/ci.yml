name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Auto Build CI
    runs-on: ${{ matrix.os }}
    strategy: 
        matrix:
            os: [ubuntu-latest, macOS-latest]
            rust: [nightly, beta, stable]
 
    steps:
      - name: Install Docker on macOS
        if: matrix.os == 'macOS-latest'
        run: |
          brew install docker
          docker ps --all --quiet --no-trunc --filter "label=5588e4"
          docker network prune --force --filter "label=5588e4"
          docker network create --label 5588e4 github_network_019b2ccf5882476dba293b3e20eab027
          docker pull postgres:11
          docker pull mysql:8.0
      
      - name: Install Docker on macOS
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker ps --all --quiet --no-trunc --filter "label=5588e4"
          docker network prune --force --filter "label=5588e4"
          docker network create --label 5588e4 github_network_019b2ccf5882476dba293b3e20eab027
          docker pull postgres:11
          docker pull mysql:8.0


      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Install Rust toolchain ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          override: true

      - name: Install PostgreSQL & MySQL & SQLite Dependencies(ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libpq-dev postgresql-client mysql-client libmysqlclient-dev libsqlite3-dev sqlite3

      - name: Install PostgreSQL & MySQL & SQLite Dependencies(macOS) 
        if: matrix.os == 'macOS-latest'
        run: |
            brew install libpq postgresql 
            brew install mysql-client
            echo 'export PATH="/usr/local/opt/mysql-client/bin:$PATH"' >> ~/.bash_profile
            source ~/.bash_profile
            brew install sqlite

      - name: Cargo Build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Cargo Test For PostgreSQL,async-std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features postgres,runtime-async-std

      - name: Cargo Test For PostgreSQL,tokio
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features postgres,runtime-tokio

      - name: Cargo Test For MySQL,async-std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features mysql,runtime-async-std

      - name: Cargo Test For MySQL,tokio
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features mysql,runtime-tokio

      - name: Cargo Test For SQLite,async-std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features sqlite,runtime-async-std

      - name: Cargo Test For SQLite,tokio
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features sqlite,runtime-tokio

      - name: Cargo Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Cargo Fmt Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
